# ============================================
# poc/experiences/models.py
# Definici√≥n de modelos principales del sistema
# ============================================

from django.db import models
from django.contrib.auth.models import User  # Modelo de usuarios de Django
from django.utils import timezone


# =======================
# üîπ MODELO EXPERIENCE
# =======================
class Experience(models.Model):
    """
    Representa una publicaci√≥n/experiencia dentro de la plataforma.
    Cada experiencia incluye:
    - company: nombre de la empresa
    - title: t√≠tulo de la publicaci√≥n
    - summary: resumen breve
    - body: descripci√≥n completa
    - created_at: fecha de creaci√≥n autom√°tica
    - author: usuario que la cre√≥ (puede ser NULL si se elimina el usuario)
    """

    # Campos principales
    company = models.CharField(max_length=120)   # Empresa asociada
    title   = models.CharField(max_length=160)   # T√≠tulo de la publicaci√≥n
    summary = models.CharField(max_length=240)   # Breve descripci√≥n
    body    = models.TextField()                 # Texto completo / detalle

    # Fecha y hora autom√°tica de creaci√≥n
    created_at = models.DateTimeField(auto_now_add=True)

    # Relaci√≥n con usuario ‚Üí permite saber qui√©n cre√≥ la experiencia
    # Si el usuario se borra, el campo queda en NULL (SET_NULL)
    author = models.ForeignKey(
        User,
        null=True, blank=True,
        on_delete=models.SET_NULL
    )

    def __str__(self):
        """Devuelve un string legible para admin y debugging."""
        return f"{self.company} - {self.title}"


# =======================
# üîπ MODELO COMMENT
# =======================
class Comment(models.Model):
    """
    Comentario hecho por un usuario sobre una experiencia espec√≠fica.
    Relaci√≥n uno-a-muchos: cada experiencia puede tener m√∫ltiples comentarios.
    """

    # Relaci√≥n hacia la experiencia
    experience = models.ForeignKey(
        Experience,
        related_name="comments",
        on_delete=models.CASCADE  # Si se borra la experiencia, se borran sus comentarios
    )

    # Usuario autor del comentario (puede ser an√≥nimo si se borra)
    author = models.ForeignKey(
        User,
        null=True, blank=True,
        on_delete=models.SET_NULL
    )

    # Texto del comentario
    text = models.TextField()

    # Fecha de creaci√≥n
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        # Los comentarios se listan del m√°s reciente al m√°s antiguo
        ordering = ["-created_at"]

    def __str__(self):
        """Muestra qui√©n coment√≥ y sobre qu√© experiencia."""
        who = self.author.username if self.author else "an√≥nimo"
        return f"Comment by {who} on {self.experience_id}"


# =======================
# üîπ MODELO COMPANY SUMMARY
# =======================
class CompanySummary(models.Model):
    """
    Resumen agregado por empresa.
    - Se actualiza cuando se crean experiencias o comentarios.
    - Guarda un cach√© para evitar recalcular en cada request.
    """

    company        = models.CharField(max_length=255, unique=True)  # Empresa (√∫nica)
    summary        = models.TextField(blank=True)                   # Texto resumen generado
    total_posts    = models.PositiveIntegerField(default=0)          # N√∫mero de experiencias
    total_comments = models.PositiveIntegerField(default=0)          # N√∫mero de comentarios
    last_computed  = models.DateTimeField(default=timezone.now)      # √öltima vez que se actualiz√≥

    class Meta:
        verbose_name = "Company summary"
        verbose_name_plural = "Company summaries"

    def __str__(self):
        """Representaci√≥n legible en admin/debugging."""
        return f"{self.company} ({self.total_posts} posts, {self.total_comments} comentarios)"